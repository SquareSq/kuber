# Ставим namespace
apiVersion: v1
kind: Namespace
metadata:
  name: api

--- # Ставим MetalLB
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: first-pool
  namespace: metallb-system
spec:
  addresses:
  - 192.168.88.220-192.168.88.250

---
apiVersion: v1
kind: Service
metadata:
  namespace: kube-system
  name: metallb
spec:
  type: LoadBalancer
  selector:
    app: metallb
  ports:
    - port: 80
      targetPort: 80

--- # Конфигмапы для приложений
apiVersion: v1
kind: ConfigMap
metadata:
  name: app1-content
  namespace: api
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>App 1</title>
    </head>
    <body>
        <h1>Это App 1</h1>
        <p>Страница от Nginx.</p>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app2-content
  namespace: api
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>App 2</title>
    </head>
    <body>
        <h1>Это App 2</h1>
        <p>Страница от Nginx.</p>
    </body>
    </html>

# Ставим nfs storage volume
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: app1-pv
  namespace: api
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  nfs:
    path: /srv/nfs/app1
    server: 192.168.88.230

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: app2-pv
  namespace: api
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  nfs:
    path: /srv/nfs/app2
    server: 192.168.88.230

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app1-pvc
  namespace: api
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app2-pvc
  namespace: api
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

--- # Ставим деплои и сервисы
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  namespace: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
      - name: app1
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - name: app1-storage
          mountPath: /usr/share/nginx/html
        - name: nfs-storage
          mountPath: /srv/nfs/app1
      volumes:
      - name: app1-storage
        configMap:
          name: app1-content
      - name: nfs-storage
        persistentVolumeClaim:
          claimName: app1-pvc
          
---
apiVersion: v1
kind: Service
metadata:
  name: app1-service
  namespace: api
spec:
  selector:
    app: app1
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
  namespace: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
      - name: app2
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - name: app2-storage
          mountPath: /usr/share/nginx/html
        - name: nfs-storage
          mountPath: /srv/nfs/app2
      volumes:
      - name: app2-storage
        configMap:
          name: app2-content
      - name: nfs-storage
        persistentVolumeClaim:
          claimName: app2-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: app2-service
  namespace: api
spec:
  selector:
    app: app2
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP